import pandas as pd
import os
import sys
sys.path.append(os.path.abspath('src'))
from nltk.sentiment import SentimentIntensityAnalyzer
from src.text_preprocessing import enrich_text_full

def write_resources_py(trigram_group_mapping, bigram_group_mapping, trigram_list, bigram_list):
    content = f"""# This file is auto-generated by 4_preprocessing.py
trigram_group_mapping = {repr(trigram_group_mapping)}
bigram_group_mapping = {repr(bigram_group_mapping)}
trigram_list = {repr(trigram_list)}
bigram_list = {repr(bigram_list)}
"""
    with open('src/resources_lemmatization.py', 'w', encoding='utf-8') as f:
        f.write(content)
    print("src/resources_lemmatization.py updated successfully.")

trigram_group_mapping = {'definitely go back': 'go_back',
                         'go back heartily': 'go_back',
                         'go back place': 'go_back', 
                         'go back soon': 'go_back', 
                         'recommend go back': 'go_back', 
                         'wait go back': 'go_back',
                         'would go back': 'go_back',

                         'ever go back': 'dont_go_back' ,
                         'never go back': 'dont_go_back', 
                       }
bigram_group_mapping = {'food delicious': 'great_food',
                        'food excellent': 'great_food',
                        'food great': 'great_food',
                        'great food': 'great_food',
                        
                        'great service': 'great_service',
                        'service excellent': 'great_service',
                        'service good': 'great_service',
                        'service great': 'great_service',
                        'service impeccable': 'great_service',
                        'service top': 'great_service'
                       }
trigram_list = ['definitely go back', 'ever go back', 'go back heartily', 'go back place', 'go back soon', 'never go back', 'recommend go back', 'wait go back', 'would go back']
bigram_list = ['absolutely love', 'bad service', 'big disappointment', 'bland oily', 'cheeseburger huge', 'chow fun', 'come back', 'cream cheese', 'dal bukhara', 'fast delivery', 'first time', 'fish fresh', 'food average', 'food delicious', 'food excellent', 'food great', 'go back', 'go wrong', 'goat cheese', 'good meal', 'good restaurant', 'good wine', 'great food', 'great place', 'great service', 'highly recommend', 'jekyll hyde', 'large portion', 'last night', 'lobster sandwich', 'look forward', 'make point', 'make reservation', 'melt mouth', 'never go', 'new york', 'one hour', 'pizza nyc', 'pleasantly surprised', 'price high', 'reasonable price', 'red eye', 'service excellent', 'service good', 'service great', 'service impeccable', 'service top', 'shabu shabu', 'shred cheese', 'smith street', 'special occasion', 'st bart', 'tasting menu', 'top notch', 'week ago', 'well prepared', 'wine list', 'write review']

df = pd.read_csv('data/processed/preprocessed_train.csv')
df['final_text'] = df['final_text'].fillna('')

write_resources_py(trigram_group_mapping, bigram_group_mapping, trigram_list, bigram_list)

df['final_text_enriched'] = df['final_text'].apply(lambda x: enrich_text_full(x, trigram_group_mapping, bigram_group_mapping, trigram_list, bigram_list))
df['text_length'] = df['final_text'].apply(len)
df['n_tokens'] = df['final_text_enriched'].apply(lambda x: len(x.split()))
sia = SentimentIntensityAnalyzer()
df['sentiment'] = df['final_text'].apply(lambda x: sia.polarity_scores(x)['compound'])

df.drop(columns=['final_text'], inplace=True)
df.to_csv('data/processed/final_processed_train.csv', index=False)